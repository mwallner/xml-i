// Copyright (c) 2009-2025 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

#ifndef CXX_________TEST_SCHEME_PSKEL_HXX
#define CXX_________TEST_SCHEME_PSKEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/version.hxx>

#if (LIBXSDE_VERSION != 300004000000000L)
#error XSD/e runtime version mismatch
#endif

#include <xsde/cxx/config.hxx>

#ifndef XSDE_ENCODING_UTF8
#error the generated code uses the UTF-8 encoding while the XSD/e runtime does not (reconfigure the runtime or change the --char-encoding value)
#endif

#ifndef XSDE_STL
#error the generated code uses STL while the XSD/e runtime does not (reconfigure the runtime or add --no-stl)
#endif

#ifndef XSDE_IOSTREAM
#error the generated code uses iostream while the XSD/e runtime does not (reconfigure the runtime or add --no-iostream)
#endif

#ifndef XSDE_EXCEPTIONS
#error the generated code uses exceptions while the XSD/e runtime does not (reconfigure the runtime or add --no-exceptions)
#endif

#ifndef XSDE_LONGLONG
#error the generated code uses long long while the XSD/e runtime does not (reconfigure the runtime or add --no-long-long)
#endif

#ifndef XSDE_PARSER_VALIDATION
#error the generated code uses validation while the XSD/e runtime does not (reconfigure the runtime or add --suppress-validation)
#endif

#ifdef XSDE_POLYMORPHIC
#error the generated code expects XSD/e runtime without polymorphism support (reconfigure the runtime or add --generate-polymorphic/--runtime-polymorphic)
#endif

#ifndef XSDE_REUSE_STYLE_TIEIN
#error the generated code uses the tiein reuse style while the XSD/e runtime does not (reconfigure the runtime or add --reuse-style-mixin or --reuse-style-none)
#endif

#ifdef XSDE_CUSTOM_ALLOCATOR
#error the XSD/e runtime uses custom allocator while the generated code does not (reconfigure the runtime or add --custom-allocator)
#endif

#include <xsde/cxx/pre.hxx>

// Forward declarations
//
class start_pskel;
class blips_pskel;
class boings_pskel;
class blip_pskel;
class boing_pskel;

#include <xsde/cxx/ro-string.hxx>

#include <xsde/cxx/parser/xml-schema.hxx>

#include <xsde/cxx/parser/exceptions.hxx>

#include <xsde/cxx/stack.hxx>
#include <xsde/cxx/parser/validating/parser.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pskel.hxx>
#include <xsde/cxx/parser/validating/xml-schema-pimpl.hxx>

#include <xsde/cxx/parser/expat/document.hxx>

namespace xml_schema
{
  // Built-in XML Schema types mapping.
  //
  using ::xsde::cxx::string_sequence;
  using ::xsde::cxx::qname;
  using ::xsde::cxx::buffer;
  using ::xsde::cxx::time_zone;
  using ::xsde::cxx::gday;
  using ::xsde::cxx::gmonth;
  using ::xsde::cxx::gyear;
  using ::xsde::cxx::gmonth_day;
  using ::xsde::cxx::gyear_month;
  using ::xsde::cxx::date;
  using ::xsde::cxx::time;
  using ::xsde::cxx::date_time;
  using ::xsde::cxx::duration;

  // Base parser skeletons.
  //
  using ::xsde::cxx::parser::parser_base;
  typedef ::xsde::cxx::parser::validating::empty_content parser_empty_content;
  typedef ::xsde::cxx::parser::validating::simple_content parser_simple_content;
  typedef ::xsde::cxx::parser::validating::complex_content parser_complex_content;
  typedef ::xsde::cxx::parser::validating::list_base parser_list_base;

  // Parser skeletons and implementations for the XML Schema
  // built-in types.
  //
  using ::xsde::cxx::parser::validating::any_type_pskel;
  using ::xsde::cxx::parser::validating::any_type_pimpl;

  using ::xsde::cxx::parser::validating::any_simple_type_pskel;
  using ::xsde::cxx::parser::validating::any_simple_type_pimpl;

  using ::xsde::cxx::parser::validating::byte_pskel;
  using ::xsde::cxx::parser::validating::byte_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_byte_pskel;
  using ::xsde::cxx::parser::validating::unsigned_byte_pimpl;

  using ::xsde::cxx::parser::validating::short_pskel;
  using ::xsde::cxx::parser::validating::short_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_short_pskel;
  using ::xsde::cxx::parser::validating::unsigned_short_pimpl;

  using ::xsde::cxx::parser::validating::int_pskel;
  using ::xsde::cxx::parser::validating::int_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_int_pskel;
  using ::xsde::cxx::parser::validating::unsigned_int_pimpl;

  using ::xsde::cxx::parser::validating::long_pskel;
  using ::xsde::cxx::parser::validating::long_pimpl;

  using ::xsde::cxx::parser::validating::unsigned_long_pskel;
  using ::xsde::cxx::parser::validating::unsigned_long_pimpl;

  using ::xsde::cxx::parser::validating::integer_pskel;
  using ::xsde::cxx::parser::validating::integer_pimpl;

  using ::xsde::cxx::parser::validating::non_positive_integer_pskel;
  using ::xsde::cxx::parser::validating::non_positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::non_negative_integer_pskel;
  using ::xsde::cxx::parser::validating::non_negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::positive_integer_pskel;
  using ::xsde::cxx::parser::validating::positive_integer_pimpl;

  using ::xsde::cxx::parser::validating::negative_integer_pskel;
  using ::xsde::cxx::parser::validating::negative_integer_pimpl;

  using ::xsde::cxx::parser::validating::boolean_pskel;
  using ::xsde::cxx::parser::validating::boolean_pimpl;

  using ::xsde::cxx::parser::validating::float_pskel;
  using ::xsde::cxx::parser::validating::float_pimpl;

  using ::xsde::cxx::parser::validating::double_pskel;
  using ::xsde::cxx::parser::validating::double_pimpl;

  using ::xsde::cxx::parser::validating::decimal_pskel;
  using ::xsde::cxx::parser::validating::decimal_pimpl;

  using ::xsde::cxx::parser::validating::string_pskel;
  using ::xsde::cxx::parser::validating::string_pimpl;

  using ::xsde::cxx::parser::validating::normalized_string_pskel;
  using ::xsde::cxx::parser::validating::normalized_string_pimpl;

  using ::xsde::cxx::parser::validating::token_pskel;
  using ::xsde::cxx::parser::validating::token_pimpl;

  using ::xsde::cxx::parser::validating::name_pskel;
  using ::xsde::cxx::parser::validating::name_pimpl;

  using ::xsde::cxx::parser::validating::nmtoken_pskel;
  using ::xsde::cxx::parser::validating::nmtoken_pimpl;

  using ::xsde::cxx::parser::validating::nmtokens_pskel;
  using ::xsde::cxx::parser::validating::nmtokens_pimpl;

  using ::xsde::cxx::parser::validating::ncname_pskel;
  using ::xsde::cxx::parser::validating::ncname_pimpl;

  using ::xsde::cxx::parser::validating::language_pskel;
  using ::xsde::cxx::parser::validating::language_pimpl;

  using ::xsde::cxx::parser::validating::id_pskel;
  using ::xsde::cxx::parser::validating::id_pimpl;

  using ::xsde::cxx::parser::validating::idref_pskel;
  using ::xsde::cxx::parser::validating::idref_pimpl;

  using ::xsde::cxx::parser::validating::idrefs_pskel;
  using ::xsde::cxx::parser::validating::idrefs_pimpl;

  using ::xsde::cxx::parser::validating::uri_pskel;
  using ::xsde::cxx::parser::validating::uri_pimpl;

  using ::xsde::cxx::parser::validating::qname_pskel;
  using ::xsde::cxx::parser::validating::qname_pimpl;

  using ::xsde::cxx::parser::validating::base64_binary_pskel;
  using ::xsde::cxx::parser::validating::base64_binary_pimpl;

  using ::xsde::cxx::parser::validating::hex_binary_pskel;
  using ::xsde::cxx::parser::validating::hex_binary_pimpl;

  using ::xsde::cxx::parser::validating::date_pskel;
  using ::xsde::cxx::parser::validating::date_pimpl;

  using ::xsde::cxx::parser::validating::date_time_pskel;
  using ::xsde::cxx::parser::validating::date_time_pimpl;

  using ::xsde::cxx::parser::validating::duration_pskel;
  using ::xsde::cxx::parser::validating::duration_pimpl;

  using ::xsde::cxx::parser::validating::gday_pskel;
  using ::xsde::cxx::parser::validating::gday_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_pskel;
  using ::xsde::cxx::parser::validating::gmonth_pimpl;

  using ::xsde::cxx::parser::validating::gmonth_day_pskel;
  using ::xsde::cxx::parser::validating::gmonth_day_pimpl;

  using ::xsde::cxx::parser::validating::gyear_pskel;
  using ::xsde::cxx::parser::validating::gyear_pimpl;

  using ::xsde::cxx::parser::validating::gyear_month_pskel;
  using ::xsde::cxx::parser::validating::gyear_month_pimpl;

  using ::xsde::cxx::parser::validating::time_pskel;
  using ::xsde::cxx::parser::validating::time_pimpl;

  // Read-only string.
  //
  using ::xsde::cxx::ro_string;

  // Error codes.
  //
  typedef xsde::cxx::parser::expat::xml_error parser_xml_error;
  typedef xsde::cxx::schema_error parser_schema_error;

  // Exceptions.
  //
  typedef xsde::cxx::parser::exception parser_exception;
  typedef xsde::cxx::parser::xml parser_xml;
  typedef xsde::cxx::parser::schema parser_schema;

  // Document parser.
  //
  using xsde::cxx::parser::expat::document_pimpl;

  // Parser context.
  //
  typedef xsde::cxx::parser::context parser_context;
}

class start_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  enum choice_arm_tag
  {
    blips_tag,
    boings_tag
  };

  virtual void
  choice_arm (choice_arm_tag);

  virtual void
  blips ();

  virtual void
  boings ();

  virtual void
  post_start ();

  // Parser construction API.
  //
  void
  parsers (::blips_pskel& /* blips */,
           ::boings_pskel& /* boings */);

  // Individual element parsers.
  //
  void
  blips_parser (::blips_pskel&);

  void
  boings_parser (::boings_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  start_pskel ();

  // Implementation details.
  //
  protected:
  start_pskel* start_impl_;
  start_pskel (start_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::blips_pskel* blips_parser_;
  ::boings_pskel* boings_parser_;

  public:
  struct v_state_descr_
  {
    void (::start_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  choice_0 (unsigned long&,
            unsigned long&,
            const ::xsde::cxx::ro_string&,
            const ::xsde::cxx::ro_string&,
            bool);
};

class blips_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  blip ();

  virtual void
  post_blips ();

  // Parser construction API.
  //
  void
  parsers (::blip_pskel& /* blip */);

  // Individual element parsers.
  //
  void
  blip_parser (::blip_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  blips_pskel ();

  // Implementation details.
  //
  protected:
  blips_pskel* blips_impl_;
  blips_pskel (blips_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::blip_pskel* blip_parser_;

  public:
  struct v_state_descr_
  {
    void (::blips_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class boings_pskel: public ::xsde::cxx::parser::validating::complex_content
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Elements.
  //
  virtual void
  boing ();

  virtual void
  post_boings ();

  // Parser construction API.
  //
  void
  parsers (::boing_pskel& /* boing */);

  // Individual element parsers.
  //
  void
  boing_parser (::boing_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  boings_pskel ();

  // Implementation details.
  //
  protected:
  boings_pskel* boings_impl_;
  boings_pskel (boings_pskel*, void*);

  protected:
  virtual bool
  _start_element_impl (const ::xsde::cxx::ro_string&,
                       const ::xsde::cxx::ro_string&);

  virtual bool
  _end_element_impl (const ::xsde::cxx::ro_string&,
                     const ::xsde::cxx::ro_string&);

  protected:
  ::boing_pskel* boing_parser_;

  public:
  struct v_state_descr_
  {
    void (::boings_pskel::*func) (
      unsigned long&,
      unsigned long&,
      const ::xsde::cxx::ro_string&,
      const ::xsde::cxx::ro_string&,
      bool);
    unsigned long state;
    unsigned long count;
  };

  struct v_state_
  {
    v_state_descr_ data[2UL];
    unsigned long size;
  };

  protected:
  v_state_ v_state_first_;
  ::xsde::cxx::stack v_state_stack_;

  virtual void
  _pre_e_validate ();

  virtual void
  _post_e_validate ();

  void
  sequence_0 (unsigned long&,
              unsigned long&,
              const ::xsde::cxx::ro_string&,
              const ::xsde::cxx::ro_string&,
              bool);
};

class blip_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  a_1 (const ::std::string&);

  virtual void
  a_2 (const ::std::string&);

  virtual void
  a_3 (const ::std::string&);

  virtual void
  a_4 (const ::std::string&);

  virtual void
  a_5 (const ::std::string&);

  virtual void
  a_6 (const ::std::string&);

  virtual void
  a_7 (const ::std::string&);

  virtual void
  a_8 (const ::std::string&);

  virtual void
  a_9 (const ::std::string&);

  virtual void
  a_10 (const ::std::string&);

  virtual void
  post_blip ();

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* a_1 */,
           ::xml_schema::string_pskel& /* a_2 */,
           ::xml_schema::string_pskel& /* a_3 */,
           ::xml_schema::string_pskel& /* a_4 */,
           ::xml_schema::string_pskel& /* a_5 */,
           ::xml_schema::string_pskel& /* a_6 */,
           ::xml_schema::string_pskel& /* a_7 */,
           ::xml_schema::string_pskel& /* a_8 */,
           ::xml_schema::string_pskel& /* a_9 */,
           ::xml_schema::string_pskel& /* a_10 */);

  // Individual attribute parsers.
  //
  void
  a_1_parser (::xml_schema::string_pskel&);

  void
  a_2_parser (::xml_schema::string_pskel&);

  void
  a_3_parser (::xml_schema::string_pskel&);

  void
  a_4_parser (::xml_schema::string_pskel&);

  void
  a_5_parser (::xml_schema::string_pskel&);

  void
  a_6_parser (::xml_schema::string_pskel&);

  void
  a_7_parser (::xml_schema::string_pskel&);

  void
  a_8_parser (::xml_schema::string_pskel&);

  void
  a_9_parser (::xml_schema::string_pskel&);

  void
  a_10_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  blip_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  blip_pskel* blip_impl_;
  blip_pskel (blip_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* a_1_parser_;
  ::xml_schema::string_pskel* a_2_parser_;
  ::xml_schema::string_pskel* a_3_parser_;
  ::xml_schema::string_pskel* a_4_parser_;
  ::xml_schema::string_pskel* a_5_parser_;
  ::xml_schema::string_pskel* a_6_parser_;
  ::xml_schema::string_pskel* a_7_parser_;
  ::xml_schema::string_pskel* a_8_parser_;
  ::xml_schema::string_pskel* a_9_parser_;
  ::xml_schema::string_pskel* a_10_parser_;
};

class boing_pskel: public ::xml_schema::string_pskel
{
  public:
  // Parser callbacks. Override them in your implementation.
  //
  // virtual void
  // pre ();

  // Attributes.
  //
  virtual void
  a_1 (const ::std::string&);

  virtual void
  a_2 (const ::std::string&);

  virtual void
  a_3 (const ::std::string&);

  virtual void
  a_4 (const ::std::string&);

  virtual void
  a_5 (const ::std::string&);

  virtual void
  a_6 (const ::std::string&);

  virtual void
  a_7 (const ::std::string&);

  virtual void
  a_8 (const ::std::string&);

  virtual void
  a_9 (const ::std::string&);

  virtual void
  a_10 (const ::std::string&);

  virtual void
  post_boing ();

  // Parser construction API.
  //
  void
  parsers (::xml_schema::string_pskel& /* a_1 */,
           ::xml_schema::string_pskel& /* a_2 */,
           ::xml_schema::string_pskel& /* a_3 */,
           ::xml_schema::string_pskel& /* a_4 */,
           ::xml_schema::string_pskel& /* a_5 */,
           ::xml_schema::string_pskel& /* a_6 */,
           ::xml_schema::string_pskel& /* a_7 */,
           ::xml_schema::string_pskel& /* a_8 */,
           ::xml_schema::string_pskel& /* a_9 */,
           ::xml_schema::string_pskel& /* a_10 */);

  // Individual attribute parsers.
  //
  void
  a_1_parser (::xml_schema::string_pskel&);

  void
  a_2_parser (::xml_schema::string_pskel&);

  void
  a_3_parser (::xml_schema::string_pskel&);

  void
  a_4_parser (::xml_schema::string_pskel&);

  void
  a_5_parser (::xml_schema::string_pskel&);

  void
  a_6_parser (::xml_schema::string_pskel&);

  void
  a_7_parser (::xml_schema::string_pskel&);

  void
  a_8_parser (::xml_schema::string_pskel&);

  void
  a_9_parser (::xml_schema::string_pskel&);

  void
  a_10_parser (::xml_schema::string_pskel&);

  virtual void
  _reset ();

  // Constructor.
  //
  boing_pskel (::xml_schema::string_pskel* tiein);

  // Implementation details.
  //
  virtual ::std::string
  post_string ();

  protected:
  boing_pskel* boing_impl_;
  boing_pskel (boing_pskel*, void*);

  protected:
  virtual bool
  _attribute_impl_phase_one (const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&,
                             const ::xsde::cxx::ro_string&);


  protected:
  ::xml_schema::string_pskel* a_1_parser_;
  ::xml_schema::string_pskel* a_2_parser_;
  ::xml_schema::string_pskel* a_3_parser_;
  ::xml_schema::string_pskel* a_4_parser_;
  ::xml_schema::string_pskel* a_5_parser_;
  ::xml_schema::string_pskel* a_6_parser_;
  ::xml_schema::string_pskel* a_7_parser_;
  ::xml_schema::string_pskel* a_8_parser_;
  ::xml_schema::string_pskel* a_9_parser_;
  ::xml_schema::string_pskel* a_10_parser_;
};

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_________TEST_SCHEME_PSKEL_HXX
