// Copyright (c) 2009-2025 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include <xsde/cxx/pre.hxx>

#include "scheme-pskel.hxx"

// start_pskel
//

void start_pskel::
blips_parser (::blips_pskel& p)
{
  this->blips_parser_ = &p;
}

void start_pskel::
boings_parser (::boings_pskel& p)
{
  this->boings_parser_ = &p;
}

void start_pskel::
parsers (::blips_pskel& blips,
         ::boings_pskel& boings)
{
  this->blips_parser_ = &blips;
  this->boings_parser_ = &boings;
}

start_pskel::
start_pskel ()
: start_impl_ (0),
  blips_parser_ (0),
  boings_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

start_pskel::
start_pskel (start_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  start_impl_ (impl),
  blips_parser_ (0),
  boings_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// blips_pskel
//

void blips_pskel::
blip_parser (::blip_pskel& p)
{
  this->blip_parser_ = &p;
}

void blips_pskel::
parsers (::blip_pskel& blip)
{
  this->blip_parser_ = &blip;
}

blips_pskel::
blips_pskel ()
: blips_impl_ (0),
  blip_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

blips_pskel::
blips_pskel (blips_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  blips_impl_ (impl),
  blip_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// boings_pskel
//

void boings_pskel::
boing_parser (::boing_pskel& p)
{
  this->boing_parser_ = &p;
}

void boings_pskel::
parsers (::boing_pskel& boing)
{
  this->boing_parser_ = &boing;
}

boings_pskel::
boings_pskel ()
: boings_impl_ (0),
  boing_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

boings_pskel::
boings_pskel (boings_pskel* impl, void*)
: ::xsde::cxx::parser::validating::complex_content (impl, 0),
  boings_impl_ (impl),
  boing_parser_ (0),
  v_state_stack_ (sizeof (v_state_), &v_state_first_)
{
}

// blip_pskel
//

void blip_pskel::
a_1_parser (::xml_schema::string_pskel& p)
{
  this->a_1_parser_ = &p;
}

void blip_pskel::
a_2_parser (::xml_schema::string_pskel& p)
{
  this->a_2_parser_ = &p;
}

void blip_pskel::
a_3_parser (::xml_schema::string_pskel& p)
{
  this->a_3_parser_ = &p;
}

void blip_pskel::
a_4_parser (::xml_schema::string_pskel& p)
{
  this->a_4_parser_ = &p;
}

void blip_pskel::
a_5_parser (::xml_schema::string_pskel& p)
{
  this->a_5_parser_ = &p;
}

void blip_pskel::
a_6_parser (::xml_schema::string_pskel& p)
{
  this->a_6_parser_ = &p;
}

void blip_pskel::
a_7_parser (::xml_schema::string_pskel& p)
{
  this->a_7_parser_ = &p;
}

void blip_pskel::
a_8_parser (::xml_schema::string_pskel& p)
{
  this->a_8_parser_ = &p;
}

void blip_pskel::
a_9_parser (::xml_schema::string_pskel& p)
{
  this->a_9_parser_ = &p;
}

void blip_pskel::
a_10_parser (::xml_schema::string_pskel& p)
{
  this->a_10_parser_ = &p;
}

void blip_pskel::
parsers (::xml_schema::string_pskel& a_1,
         ::xml_schema::string_pskel& a_2,
         ::xml_schema::string_pskel& a_3,
         ::xml_schema::string_pskel& a_4,
         ::xml_schema::string_pskel& a_5,
         ::xml_schema::string_pskel& a_6,
         ::xml_schema::string_pskel& a_7,
         ::xml_schema::string_pskel& a_8,
         ::xml_schema::string_pskel& a_9,
         ::xml_schema::string_pskel& a_10)
{
  this->a_1_parser_ = &a_1;
  this->a_2_parser_ = &a_2;
  this->a_3_parser_ = &a_3;
  this->a_4_parser_ = &a_4;
  this->a_5_parser_ = &a_5;
  this->a_6_parser_ = &a_6;
  this->a_7_parser_ = &a_7;
  this->a_8_parser_ = &a_8;
  this->a_9_parser_ = &a_9;
  this->a_10_parser_ = &a_10;
}

blip_pskel::
blip_pskel (::xml_schema::string_pskel* tiein)
: ::xml_schema::string_pskel (tiein, 0),
  blip_impl_ (0),
  a_1_parser_ (0),
  a_2_parser_ (0),
  a_3_parser_ (0),
  a_4_parser_ (0),
  a_5_parser_ (0),
  a_6_parser_ (0),
  a_7_parser_ (0),
  a_8_parser_ (0),
  a_9_parser_ (0),
  a_10_parser_ (0)
{
}

blip_pskel::
blip_pskel (blip_pskel* impl, void*)
: ::xml_schema::string_pskel (impl, 0),
  blip_impl_ (impl),
  a_1_parser_ (0),
  a_2_parser_ (0),
  a_3_parser_ (0),
  a_4_parser_ (0),
  a_5_parser_ (0),
  a_6_parser_ (0),
  a_7_parser_ (0),
  a_8_parser_ (0),
  a_9_parser_ (0),
  a_10_parser_ (0)
{
}

// boing_pskel
//

void boing_pskel::
a_1_parser (::xml_schema::string_pskel& p)
{
  this->a_1_parser_ = &p;
}

void boing_pskel::
a_2_parser (::xml_schema::string_pskel& p)
{
  this->a_2_parser_ = &p;
}

void boing_pskel::
a_3_parser (::xml_schema::string_pskel& p)
{
  this->a_3_parser_ = &p;
}

void boing_pskel::
a_4_parser (::xml_schema::string_pskel& p)
{
  this->a_4_parser_ = &p;
}

void boing_pskel::
a_5_parser (::xml_schema::string_pskel& p)
{
  this->a_5_parser_ = &p;
}

void boing_pskel::
a_6_parser (::xml_schema::string_pskel& p)
{
  this->a_6_parser_ = &p;
}

void boing_pskel::
a_7_parser (::xml_schema::string_pskel& p)
{
  this->a_7_parser_ = &p;
}

void boing_pskel::
a_8_parser (::xml_schema::string_pskel& p)
{
  this->a_8_parser_ = &p;
}

void boing_pskel::
a_9_parser (::xml_schema::string_pskel& p)
{
  this->a_9_parser_ = &p;
}

void boing_pskel::
a_10_parser (::xml_schema::string_pskel& p)
{
  this->a_10_parser_ = &p;
}

void boing_pskel::
parsers (::xml_schema::string_pskel& a_1,
         ::xml_schema::string_pskel& a_2,
         ::xml_schema::string_pskel& a_3,
         ::xml_schema::string_pskel& a_4,
         ::xml_schema::string_pskel& a_5,
         ::xml_schema::string_pskel& a_6,
         ::xml_schema::string_pskel& a_7,
         ::xml_schema::string_pskel& a_8,
         ::xml_schema::string_pskel& a_9,
         ::xml_schema::string_pskel& a_10)
{
  this->a_1_parser_ = &a_1;
  this->a_2_parser_ = &a_2;
  this->a_3_parser_ = &a_3;
  this->a_4_parser_ = &a_4;
  this->a_5_parser_ = &a_5;
  this->a_6_parser_ = &a_6;
  this->a_7_parser_ = &a_7;
  this->a_8_parser_ = &a_8;
  this->a_9_parser_ = &a_9;
  this->a_10_parser_ = &a_10;
}

boing_pskel::
boing_pskel (::xml_schema::string_pskel* tiein)
: ::xml_schema::string_pskel (tiein, 0),
  boing_impl_ (0),
  a_1_parser_ (0),
  a_2_parser_ (0),
  a_3_parser_ (0),
  a_4_parser_ (0),
  a_5_parser_ (0),
  a_6_parser_ (0),
  a_7_parser_ (0),
  a_8_parser_ (0),
  a_9_parser_ (0),
  a_10_parser_ (0)
{
}

boing_pskel::
boing_pskel (boing_pskel* impl, void*)
: ::xml_schema::string_pskel (impl, 0),
  boing_impl_ (impl),
  a_1_parser_ (0),
  a_2_parser_ (0),
  a_3_parser_ (0),
  a_4_parser_ (0),
  a_5_parser_ (0),
  a_6_parser_ (0),
  a_7_parser_ (0),
  a_8_parser_ (0),
  a_9_parser_ (0),
  a_10_parser_ (0)
{
}

#include <assert.h>

// start_pskel
//

void start_pskel::
blips ()
{
  if (this->start_impl_)
    this->start_impl_->blips ();
}

void start_pskel::
boings ()
{
  if (this->start_impl_)
    this->start_impl_->boings ();
}

void start_pskel::
post_start ()
{
  if (this->start_impl_)
    this->start_impl_->post_start ();
}

void start_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->resetting_ = true;

  if (this->blips_parser_)
    this->blips_parser_->_reset ();

  if (this->boings_parser_)
    this->boings_parser_->_reset ();

  this->resetting_ = false;
}

// blips_pskel
//

void blips_pskel::
blip ()
{
  if (this->blips_impl_)
    this->blips_impl_->blip ();
}

void blips_pskel::
post_blips ()
{
  if (this->blips_impl_)
    this->blips_impl_->post_blips ();
}

void blips_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->resetting_ = true;

  if (this->blip_parser_)
    this->blip_parser_->_reset ();

  this->resetting_ = false;
}

// boings_pskel
//

void boings_pskel::
boing ()
{
  if (this->boings_impl_)
    this->boings_impl_->boing ();
}

void boings_pskel::
post_boings ()
{
  if (this->boings_impl_)
    this->boings_impl_->post_boings ();
}

void boings_pskel::
_reset ()
{
  if (this->resetting_)
    return;

  typedef ::xsde::cxx::parser::validating::complex_content base;
  base::_reset ();

  this->v_state_stack_.clear ();

  this->resetting_ = true;

  if (this->boing_parser_)
    this->boing_parser_->_reset ();

  this->resetting_ = false;
}

// blip_pskel
//

void blip_pskel::
a_1 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_1 (x);
}

void blip_pskel::
a_2 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_2 (x);
}

void blip_pskel::
a_3 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_3 (x);
}

void blip_pskel::
a_4 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_4 (x);
}

void blip_pskel::
a_5 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_5 (x);
}

void blip_pskel::
a_6 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_6 (x);
}

void blip_pskel::
a_7 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_7 (x);
}

void blip_pskel::
a_8 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_8 (x);
}

void blip_pskel::
a_9 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_9 (x);
}

void blip_pskel::
a_10 (const ::std::string& x)
{
  if (this->blip_impl_)
    this->blip_impl_->a_10 (x);
}

void blip_pskel::
post_blip ()
{
  if (this->blip_impl_)
    this->blip_impl_->post_blip ();
}

void blip_pskel::
_reset ()
{
  typedef ::xml_schema::string_pskel base;
  base::_reset ();

  if (this->a_1_parser_)
    this->a_1_parser_->_reset ();

  if (this->a_2_parser_)
    this->a_2_parser_->_reset ();

  if (this->a_3_parser_)
    this->a_3_parser_->_reset ();

  if (this->a_4_parser_)
    this->a_4_parser_->_reset ();

  if (this->a_5_parser_)
    this->a_5_parser_->_reset ();

  if (this->a_6_parser_)
    this->a_6_parser_->_reset ();

  if (this->a_7_parser_)
    this->a_7_parser_->_reset ();

  if (this->a_8_parser_)
    this->a_8_parser_->_reset ();

  if (this->a_9_parser_)
    this->a_9_parser_->_reset ();

  if (this->a_10_parser_)
    this->a_10_parser_->_reset ();
}

::std::string blip_pskel::
post_string ()
{
  assert (this->string_impl_);
  return this->string_impl_->post_string ();
}

// boing_pskel
//

void boing_pskel::
a_1 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_1 (x);
}

void boing_pskel::
a_2 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_2 (x);
}

void boing_pskel::
a_3 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_3 (x);
}

void boing_pskel::
a_4 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_4 (x);
}

void boing_pskel::
a_5 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_5 (x);
}

void boing_pskel::
a_6 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_6 (x);
}

void boing_pskel::
a_7 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_7 (x);
}

void boing_pskel::
a_8 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_8 (x);
}

void boing_pskel::
a_9 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_9 (x);
}

void boing_pskel::
a_10 (const ::std::string& x)
{
  if (this->boing_impl_)
    this->boing_impl_->a_10 (x);
}

void boing_pskel::
post_boing ()
{
  if (this->boing_impl_)
    this->boing_impl_->post_boing ();
}

void boing_pskel::
_reset ()
{
  typedef ::xml_schema::string_pskel base;
  base::_reset ();

  if (this->a_1_parser_)
    this->a_1_parser_->_reset ();

  if (this->a_2_parser_)
    this->a_2_parser_->_reset ();

  if (this->a_3_parser_)
    this->a_3_parser_->_reset ();

  if (this->a_4_parser_)
    this->a_4_parser_->_reset ();

  if (this->a_5_parser_)
    this->a_5_parser_->_reset ();

  if (this->a_6_parser_)
    this->a_6_parser_->_reset ();

  if (this->a_7_parser_)
    this->a_7_parser_->_reset ();

  if (this->a_8_parser_)
    this->a_8_parser_->_reset ();

  if (this->a_9_parser_)
    this->a_9_parser_->_reset ();

  if (this->a_10_parser_)
    this->a_10_parser_->_reset ();
}

::std::string boing_pskel::
post_string ()
{
  assert (this->string_impl_);
  return this->string_impl_->post_string ();
}

#include <assert.h>

// Element validation and dispatch functions for start_pskel.
//
bool start_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "blips" && ns.empty ())
        s = 0UL;
      else if (n == "boings" && ns.empty ())
        s = 1UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &start_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool start_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void start_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void start_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void start_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "blips" && ns.empty ())
      {
        if (start)
        {
          if (this->blips_parser_)
          {
            this->blips_parser_->pre ();
            ctx.nested_parser (this->blips_parser_);
          }
        }
        else
        {
          if (this->blips_parser_ != 0)
          {
            this->blips_parser_->post_blips ();
            this->blips ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = 1UL;
        // Fall through.
      }
    }
    // Fall through.
    case 1UL:
    {
      if (n == "boings" && ns.empty ())
      {
        if (start)
        {
          if (this->boings_parser_)
          {
            this->boings_parser_->pre ();
            ctx.nested_parser (this->boings_parser_);
          }
        }
        else
        {
          if (this->boings_parser_ != 0)
          {
            this->boings_parser_->post_boings ();
            this->boings ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for blips_pskel.
//
bool blips_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "blip" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &blips_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool blips_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void blips_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void blips_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void blips_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "blip" && ns.empty ())
      {
        if (start)
        {
          if (this->blip_parser_)
          {
            this->blip_parser_->pre ();
            ctx.nested_parser (this->blip_parser_);
          }
        }
        else
        {
          if (this->blip_parser_ != 0)
          {
            this->blip_parser_->post_blip ();
            this->blip ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Element validation and dispatch functions for boings_pskel.
//
bool boings_pskel::
_start_element_impl (const ::xsde::cxx::ro_string& ns,
                     const ::xsde::cxx::ro_string& n)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  if (vd->func == 0 && vd->state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (base::_start_element_impl (ns, n))
      return true;
    else
      vd->state = 1;
  }

  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, ns, n, true);

    vd = vs.data + (vs.size - 1);

    if (vd->state == ~0UL && !ctx.error_type ())
      vd = vs.data + (--vs.size - 1);
    else
      break;
  }

  if (vd->func == 0)
  {
    if (vd->state != ~0UL)
    {
      unsigned long s = ~0UL;

      if (n == "boing" && ns.empty ())
        s = 0UL;

      if (s != ~0UL)
      {
        vd->count++;
        vd->state = ~0UL;

        vd = vs.data + vs.size++;
        vd->func = &boings_pskel::sequence_0;
        vd->state = s;
        vd->count = 0;

        this->sequence_0 (vd->state, vd->count, ns, n, true);
      }
      else
      {
        return false;
      }
    }
    else
      return false;
  }

  return true;
}

bool boings_pskel::
_end_element_impl (const ::xsde::cxx::ro_string& ns,
                   const ::xsde::cxx::ro_string& n)
{
  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size - 1];

  if (vd.func == 0 && vd.state == 0)
  {
    typedef ::xsde::cxx::parser::validating::complex_content base;
    if (!base::_end_element_impl (ns, n))
      assert (false);
    return true;
  }

  assert (vd.func != 0);
  (this->*vd.func) (vd.state, vd.count, ns, n, false);

  if (vd.state == ~0UL)
    vs.size--;

  return true;
}

void boings_pskel::
_pre_e_validate ()
{
  this->v_state_stack_.push ();
  static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_& vd = vs.data[vs.size++];

  vd.func = 0;
  vd.state = 0;
  vd.count = 0;
}

void boings_pskel::
_post_e_validate ()
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
  v_state_descr_* vd = vs.data + (vs.size - 1);

  ::xsde::cxx::ro_string empty;
  while (vd->func != 0)
  {
    (this->*vd->func) (vd->state, vd->count, empty, empty, true);

    if (ctx.error_type ())
      return;

    assert (vd->state == ~0UL);
    vd = vs.data + (--vs.size - 1);
  }


  this->v_state_stack_.pop ();
}

void boings_pskel::
sequence_0 (unsigned long& state,
            unsigned long& count,
            const ::xsde::cxx::ro_string& ns,
            const ::xsde::cxx::ro_string& n,
            bool start)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  XSDE_UNUSED (ctx);

  switch (state)
  {
    case 0UL:
    {
      if (n == "boing" && ns.empty ())
      {
        if (start)
        {
          if (this->boing_parser_)
          {
            this->boing_parser_->pre ();
            ctx.nested_parser (this->boing_parser_);
          }
        }
        else
        {
          if (this->boing_parser_ != 0)
          {
            this->boing_parser_->post_boing ();
            this->boing ();
          }

          count++;
        }

        break;
      }
      else
      {
        assert (start);
        count = 0;
        state = ~0UL;
        // Fall through.
      }
    }
    // Fall through.
    case ~0UL:
      break;
  }
}

// Attribute validation and dispatch functions for blip_pskel.
//
bool blip_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "a_1" && ns.empty ())
  {
    if (this->a_1_parser_)
    {
      this->a_1_parser_->pre ();

      this->a_1_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_1_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_1_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_1_parser_->post_string ();

        this->a_1 (tmp);
      }
    }

    return true;
  }

  if (n == "a_2" && ns.empty ())
  {
    if (this->a_2_parser_)
    {
      this->a_2_parser_->pre ();

      this->a_2_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_2_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_2_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_2_parser_->post_string ();

        this->a_2 (tmp);
      }
    }

    return true;
  }

  if (n == "a_3" && ns.empty ())
  {
    if (this->a_3_parser_)
    {
      this->a_3_parser_->pre ();

      this->a_3_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_3_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_3_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_3_parser_->post_string ();

        this->a_3 (tmp);
      }
    }

    return true;
  }

  if (n == "a_4" && ns.empty ())
  {
    if (this->a_4_parser_)
    {
      this->a_4_parser_->pre ();

      this->a_4_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_4_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_4_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_4_parser_->post_string ();

        this->a_4 (tmp);
      }
    }

    return true;
  }

  if (n == "a_5" && ns.empty ())
  {
    if (this->a_5_parser_)
    {
      this->a_5_parser_->pre ();

      this->a_5_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_5_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_5_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_5_parser_->post_string ();

        this->a_5 (tmp);
      }
    }

    return true;
  }

  if (n == "a_6" && ns.empty ())
  {
    if (this->a_6_parser_)
    {
      this->a_6_parser_->pre ();

      this->a_6_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_6_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_6_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_6_parser_->post_string ();

        this->a_6 (tmp);
      }
    }

    return true;
  }

  if (n == "a_7" && ns.empty ())
  {
    if (this->a_7_parser_)
    {
      this->a_7_parser_->pre ();

      this->a_7_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_7_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_7_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_7_parser_->post_string ();

        this->a_7 (tmp);
      }
    }

    return true;
  }

  if (n == "a_8" && ns.empty ())
  {
    if (this->a_8_parser_)
    {
      this->a_8_parser_->pre ();

      this->a_8_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_8_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_8_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_8_parser_->post_string ();

        this->a_8 (tmp);
      }
    }

    return true;
  }

  if (n == "a_9" && ns.empty ())
  {
    if (this->a_9_parser_)
    {
      this->a_9_parser_->pre ();

      this->a_9_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_9_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_9_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_9_parser_->post_string ();

        this->a_9 (tmp);
      }
    }

    return true;
  }

  if (n == "a_10" && ns.empty ())
  {
    if (this->a_10_parser_)
    {
      this->a_10_parser_->pre ();

      this->a_10_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_10_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_10_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_10_parser_->post_string ();

        this->a_10 (tmp);
      }
    }

    return true;
  }

  typedef ::xml_schema::string_pskel base;
  return base::_attribute_impl_phase_one (ns, n, s);
}

// Attribute validation and dispatch functions for boing_pskel.
//
bool boing_pskel::
_attribute_impl_phase_one (const ::xsde::cxx::ro_string& ns,
                           const ::xsde::cxx::ro_string& n,
                           const ::xsde::cxx::ro_string& s)
{
  ::xsde::cxx::parser::context& ctx = this->_context ();

  if (n == "a_1" && ns.empty ())
  {
    if (this->a_1_parser_)
    {
      this->a_1_parser_->pre ();

      this->a_1_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_1_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_1_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_1_parser_->post_string ();

        this->a_1 (tmp);
      }
    }

    return true;
  }

  if (n == "a_2" && ns.empty ())
  {
    if (this->a_2_parser_)
    {
      this->a_2_parser_->pre ();

      this->a_2_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_2_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_2_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_2_parser_->post_string ();

        this->a_2 (tmp);
      }
    }

    return true;
  }

  if (n == "a_3" && ns.empty ())
  {
    if (this->a_3_parser_)
    {
      this->a_3_parser_->pre ();

      this->a_3_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_3_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_3_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_3_parser_->post_string ();

        this->a_3 (tmp);
      }
    }

    return true;
  }

  if (n == "a_4" && ns.empty ())
  {
    if (this->a_4_parser_)
    {
      this->a_4_parser_->pre ();

      this->a_4_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_4_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_4_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_4_parser_->post_string ();

        this->a_4 (tmp);
      }
    }

    return true;
  }

  if (n == "a_5" && ns.empty ())
  {
    if (this->a_5_parser_)
    {
      this->a_5_parser_->pre ();

      this->a_5_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_5_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_5_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_5_parser_->post_string ();

        this->a_5 (tmp);
      }
    }

    return true;
  }

  if (n == "a_6" && ns.empty ())
  {
    if (this->a_6_parser_)
    {
      this->a_6_parser_->pre ();

      this->a_6_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_6_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_6_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_6_parser_->post_string ();

        this->a_6 (tmp);
      }
    }

    return true;
  }

  if (n == "a_7" && ns.empty ())
  {
    if (this->a_7_parser_)
    {
      this->a_7_parser_->pre ();

      this->a_7_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_7_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_7_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_7_parser_->post_string ();

        this->a_7 (tmp);
      }
    }

    return true;
  }

  if (n == "a_8" && ns.empty ())
  {
    if (this->a_8_parser_)
    {
      this->a_8_parser_->pre ();

      this->a_8_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_8_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_8_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_8_parser_->post_string ();

        this->a_8 (tmp);
      }
    }

    return true;
  }

  if (n == "a_9" && ns.empty ())
  {
    if (this->a_9_parser_)
    {
      this->a_9_parser_->pre ();

      this->a_9_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_9_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_9_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_9_parser_->post_string ();

        this->a_9 (tmp);
      }
    }

    return true;
  }

  if (n == "a_10" && ns.empty ())
  {
    if (this->a_10_parser_)
    {
      this->a_10_parser_->pre ();

      this->a_10_parser_->_pre_impl (ctx);

      if (!ctx.error_type ())
        this->a_10_parser_->_characters (s);

      if (!ctx.error_type ())
        this->a_10_parser_->_post_impl ();

      if (!ctx.error_type ())
      {
        const ::std::string& tmp = this->a_10_parser_->post_string ();

        this->a_10 (tmp);
      }
    }

    return true;
  }

  typedef ::xml_schema::string_pskel base;
  return base::_attribute_impl_phase_one (ns, n, s);
}

#include <xsde/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

